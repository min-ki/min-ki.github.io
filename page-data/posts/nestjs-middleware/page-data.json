{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/nestjs-middleware","result":{"data":{"markdownRemark":{"id":"0640c3a5-9252-5acb-aa22-bdfccb362cc1","html":"<h2 id=\"middleware\" style=\"position:relative;\"><a href=\"#middleware\" aria-label=\"middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>middleware</h2>\n<ul>\n<li>미들웨어란 route handler 앞에서 호출되는 함수이다.</li>\n<li>미들웨어 함수는 애플리케이션의 요청-응답 주기 안에서 <code class=\"language-text\">request</code> 와 <code class=\"language-text\">response</code> 객체에 접근할 수 있고, <code class=\"language-text\">next()</code> 미들웨어 함수에 접근 가능하다.</li>\n<li>next 미들웨어 함수는 흔히 <code class=\"language-text\">next</code> 라는 변수 이름으로 나타낸다.</li>\n<li>Nest 미들웨어는 기본적으로 express의 미들웨어와 동등하다.</li>\n</ul>","fields":{"slug":"/posts/nestjs-middleware","tagSlugs":["/tag/nest-js/","/tag/framework/","/tag/middleware/"]},"frontmatter":{"date":"2020-12-08T22:00:00.000Z","description":"NestJS 공식문서 Overview - Middleware를 정리한 내용입니다.","tags":["NestJS","Framework","Middleware"],"title":"NestJS - Middleware","socialImage":null}}},"pageContext":{"slug":"/posts/nestjs-middleware"}},"staticQueryHashes":["251939775","3942705351","401334301"]}