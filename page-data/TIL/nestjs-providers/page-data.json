{"componentChunkName":"component---src-templates-post-template-js","path":"/TIL/nestjs-providers","result":{"data":{"markdownRemark":{"id":"239cb46b-359a-5711-ae93-643521934d66","html":"<h2 id=\"providers\" style=\"position:relative;\"><a href=\"#providers\" aria-label=\"providers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Providers</h2>\n<ul>\n<li>Providers(공급자)는 Nest 프레임워크에서 기본적인 개념이다.</li>\n<li>Service, Repository, Factory, Helper 등 대부분의 class들이 providers가 될 수 있다.</li>\n<li>Provider 라는 주요 아이디어는 provider를 통해서 <strong>의존성 주입</strong>을 할 수 있다는 것이다.</li>\n<li>즉, 개체는 서로 다양한 관계를 만들 수 있으며 개체의 인스턴스를 연결하는 기능은 대부분 Nest 프레임워크의 런타임 시스템에 위임 될 수 있다.</li>\n<li>Proviers는 단순히 <code class=\"language-text\">@Injectable()</code> 데코레이터로 주석이 달린 클래스이다.</li>\n<li>Nest 프레임워크를 사용하면 OO-way 한 방법으로 의존성을 조직하고 디자인할 수 있으므로, SOLID 원칙을 따르는 것을 추천한다.</li>\n</ul>\n<h3 id=\"service\" style=\"position:relative;\"><a href=\"#service\" aria-label=\"service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Cat <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./interfaces/cat.interface'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatsService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> cats<span class=\"token operator\">:</span> Cat<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>cat<span class=\"token operator\">:</span> Cat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cats<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Cat<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cats<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>CLI를 통해서 다음과 같이 <code class=\"language-text\">$nest g service 서비스이름</code> 명령을 통해서 서비스를 생성할 수 있다.</li>\n<li><code class=\"language-text\">@Injectable()</code> 데코레이터는 메타데이터를 추가함으로써, 데코레이터를 추가한 클래스가 Nest의 Provider 인 것을 나타냅니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get<span class=\"token punctuation\">,</span> Post<span class=\"token punctuation\">,</span> Body <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CreateCatDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./dto/create-cat.dto'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CatsService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./cats.service'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Cat <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./interfaces/cat.interface'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cats'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatsController</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> catsService<span class=\"token operator\">:</span> CatsService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t@<span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">async</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">Body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> createCatDto<span class=\"token operator\">:</span><span class=\"token operator\">:</span> CreateCatDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catsService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>createCatDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t@<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">async</span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Cat<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catsService<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위의 코드 상에서 CatsService는 클래스 생성자를 통해서 주입되어진다.</li>\n<li>CatsService를 주입하는 곳을 잘 보면은 private 문법을 사용한 것을 볼 수 있는데 이러한 shorthand 기법은 같은 위치에서 catsService member에 대한 선언과 초기화를 동시에 할 수 있도록 해준다.</li>\n</ul>\n<h3 id=\"dependency-injection\" style=\"position:relative;\"><a href=\"#dependency-injection\" aria-label=\"dependency injection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Injection</h3>\n<ul>\n<li>Nest 프레임워크는 Dependency injection(의존성 주입) 이라는 강력한 디자인 패턴을 기반으로 만들어진다.</li>\n<li>Nest 프레임워크는 타입스크립트 덕분에, 단지 타입을 통해서 손쉽게 의존성을 관리할 수 있다.</li>\n<li>의존성 주입을 통해 제공되는 인스턴스는 처음에 없다면 생성이 되고, 만약 이미 존재한다면 반환 해준다 (싱글톤)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> catsService<span class=\"token operator\">:</span> CatsService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"scopes\" style=\"position:relative;\"><a href=\"#scopes\" aria-label=\"scopes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scopes</h3>\n<ul>\n<li>Providers는 애플리케이션의 라이프사이클과 동기화된 라이프타임을 가지고 있다.</li>\n<li>애플리케이션이 시작된다면, 모든 providers들은 인스턴스화 되어야 한다.</li>\n<li>그리고, 애플리케이션이 종료되면은 모든 providers이 사라진다.</li>\n<li>하지만, 요청 별로 인스턴스를 만들 수 도 있다. (<a href=\"https://docs.nestjs.com/fundamentals/injection-scopes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.nestjs.com/fundamentals/injection-scopes</a>)</li>\n</ul>\n<h3 id=\"custom-providers\" style=\"position:relative;\"><a href=\"#custom-providers\" aria-label=\"custom providers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Providers</h3>\n<ul>\n<li>Nest는 providers를 간의 relationships를 처리하기 위해서 내부적으로 IoC(Inversion of Control)을 내장하고 있다.</li>\n<li><code class=\"language-text\">@Injectable()</code> 데코레이터가 Providers를 사용하기 위한 유일한 방법은 아니다.</li>\n<li>더 자세한 정보는 여기서.. (<a href=\"https://docs.nestjs.com/fundamentals/custom-providers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.nestjs.com/fundamentals/custom-providers</a>)</li>\n</ul>\n<h3 id=\"optional-providers\" style=\"position:relative;\"><a href=\"#optional-providers\" aria-label=\"optional providers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Providers</h3>\n<ul>\n<li>때때론, 필수적으로 resolve 되지 않아도 되는 의존성들도 존재한다. 이때는 optional providers를 사용한다.</li>\n<li>optional providers는 종속성이 전달되지 않은 경우에 기본값을 사용한다.</li>\n<li>providers가 optinal하다는 것을 나타내려면 <code class=\"language-text\">@Optinal()</code> 데코레이터를 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> Optional<span class=\"token punctuation\">,</span> Inject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpService<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">Optinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> @<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HTTP_OPTIONS'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> httpClient<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"property-based-injection\" style=\"position:relative;\"><a href=\"#property-based-injection\" aria-label=\"property based injection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property-based injection</h3>\n<ul>\n<li>지금까지 의존성 주입은 생성자에 기반한 주입을 사용했지만, 몇가지 특정한 경우 <strong>property-based injection</strong> 이 유용할수도 있다.</li>\n<li>예를들어, 최상위 클래스가 한개 혹은 여러개의 providers에 의존한다면, 그것들을 사용하기위해서 서브클래스의 생성자로부터 매번 super() 메서드를 호출해야 하는데, 이것을 피하기위해서 property level에서 <code class=\"language-text\">@Inject()</code> 데코레이터를 사용할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> Inject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpService<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HTTP_OPTIONS'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> httpClient<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>만약 클래스가 다른 provider를 상속하지 않는다면, 항상 constructor-based injection을 사용하도록 하는 것이 좋다.</li>\n</ul>\n<h3 id=\"️-provider-registration-️\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-provider-registration-%EF%B8%8F\" aria-label=\"️ provider registration ️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ Provider registration ⭐️</h3>\n<ul>\n<li>Provider를 정의했다면, 우리는 컨트롤러 단에서 서비스를 사용을 하고자 할 것이다. 컨트롤러에서 서비스를 사용하기에 앞서서, 작성한 Provider를 먼저 등록을 해줘야 Nest에서 주입을 수행할 수 있다.</li>\n<li>등록은 x.module.ts 에서 <code class=\"language-text\">@Module()</code> 데코레이터에 providers에 배열로 서비스를 추가하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// app.module.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CatsController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./cats/cats.controller'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CatsService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./cats/cats.service'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tcontrollers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>CatsController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\tproviders<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>CatsService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"manual-instantiation\" style=\"position:relative;\"><a href=\"#manual-instantiation\" aria-label=\"manual instantiation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Manual instantiation</h3>\n<ul>\n<li>특정 상황에서, 내장된 의존성 주입 시스템의 밖에서 사용해야하는 경우가 있는데 공식문서에서는 두 가지의 방법에 대해서 논의하고 있다.</li>\n<li>기존에 존재하는 instances를 얻거나 동적으로 providers를 초기화하기 위해서, <strong>Module reference</strong> 를 사용하는 방법</li>\n<li>Standalone applications 방법</li>\n</ul>","fields":{"slug":"/TIL/nestjs-providers","tagSlugs":["/tag/nest-js/","/tag/framework/","/tag/proviers/"]},"frontmatter":{"date":"2020-12-05T22:00:00.000Z","description":"NestJS 공식문서 Overview - Providers(제공자)를 정리한 내용입니다.","tags":["NestJS","Framework","Proviers"],"title":"NestJS - Providers","socialImage":null}}},"pageContext":{"slug":"/TIL/nestjs-providers"}},"staticQueryHashes":["251939775","3942705351","401334301"]}